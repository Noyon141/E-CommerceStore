// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}
//MODEL SCHEMA STARTS FROM HERE

model Store {
  id        String  @id @default(uuid())
  name      String
  userId    String  

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  products  Product[] @relation("StoreToProduct")
  sizes     Size[] @relation("StoreToSize")
  colors   Color[] @relation("StoreToColor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard{
  id       String  @id @default(uuid())
  
  storeId String
  store   Store   @relation("StoreToBillboard",fields: [storeId], references: [id])

  label   String
  imageUrl String

  categories Category[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([storeId])
}

model Category{
  id       String  @id @default(uuid())
  name      String

  storeId String
  store   Store   @relation("StoreToCategory",fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard   @relation(fields: [billboardId], references: [id])

  products Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id       String  @id @default(uuid())
  name     String
  value    String

  storeId  String
  store    Store   @relation("StoreToSize",fields: [storeId], references: [id])

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
model Color {
  id       String  @id @default(uuid())
  name     String
  value    String

  storeId  String
  store    Store   @relation("StoreToColor",fields: [storeId], references: [id])

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id       String  @id @default(uuid())
  price    Decimal
  name     String
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)


  storeId  String
  store    Store   @relation("StoreToProduct",fields: [storeId], references: [id])
  categoryId String
  category   Category   @relation("CategoryToProduct",fields: [categoryId], references: [id])

  sizeId    String
  sizes     Size @relation(fields: [sizeId], references: [id])
  colorId   String
  colors    Color @relation(fields: [colorId], references: [id])
  
  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image{
  id       String  @id @default(uuid())
  url      String

  productId String
  product   Product   @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}